// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A Register processing
    // Determine if this is an A instruction
    Not(in=instruction[15], out=IsAInstruction);
    // If this is an A Instruction or a C instruction with a
    // destination of the A Register, we'll load the A Register
    Or(a=IsAInstruction, b=instruction[5], out=LoadAReg);
    // Route either A instruction or the output from the ALU to the
    // A Register, depending on whether this is an A or C instruction
    Mux16(a=instruction, b=AluOutA, sel=instruction[15], out=ARegIn);
    // Route the output from the A Register to the program counter, the
    // memory address output, and toward the ALU
    ARegister(in=ARegIn,
              load=LoadAReg,
              out=ARegOut,
              out[0..14]=addressM,
              out=PCIn);

    // Determine if the D Register is being loaded, based on whether this
    // is a C instruction and if the C instruction includes the D Register
    // as a destination. Prep the output of the D Register to go to the ALU's
    // x input.
    And(a=instruction[15], b=instruction[4], out=LoadDReg);
    DRegister(in=AluOutD, load=LoadDReg, out=AluX);

    // Route either the contents of the A Register or RAM contents to the ALU's
    // y input. We don't bother checking if this is a C instruction at this
    // point b/c we're just not going to pay attention to the output if it
    // isn't.
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AluY);

    // Run the ALU
    ALU(x=AluX,
        y=AluY,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=AluOutD,
        out=AluOutA,
        out=outM,
        zr=AluZero,
        ng=AluNegative);

    // If this is a C instruction and the instruction specifies to write to
    // memory, set the writeM output to 1
    And(a=instruction[3], b=instruction[15], out=writeM);

    // Jump Logic
    // Create a third variable indicating if the ALU output is positive
    Not(in=AluNegative, out=AluNonNegative);
    Not(in=AluZero, out=AluNonZero);
    And(a=AluNonNegative, b=AluNonZero, out=AluPositive);


    And(a=instruction[0], b=AluPositive, out=JGT);
    And(a=instruction[1], b=AluZero, out=JEQ);
    // Jump if >= 0 is equivalent to jumping if > 0 or = 0
    Or(a=JGT, b=JEQ, out=JGE);

    And(a=instruction[2], b=AluNegative, out=JLT);
    // Jump if != 0 is equivant to jumping if > 0 or < 0
    Or(a=JGT, b=JLT, out=JNE);
    // Jump if <= 0 is equivalent to jumping if < 0 or = 0
    Or(a=JEQ, b=JLT, out=JLE);

    // if all three j bits are set, jump unconditionally
    And(a=instruction[0], b=instruction[1], out=JMPa);
    And(a=instruction[2], b=JMPa, out=JMP);

    // if conditions indicate a jump, prep to jump
    Or8Way(in[0]=false,
           in[1]=JGT,
           in[2]=JEQ,
           in[3]=JGE,
           in[4]=JLT,
           in[5]=JNE,
           in[6]=JLE,
           in[7]=JMP,
           out=JumpA);
    // if prepped to jump and it's a C instruction, jump
    And(a=JumpA, b=instruction[15], out=Jump);
    Not(in=Jump, out=NotJump);

    PC(in=PCIn,
       load=Jump,
       inc=true,
       reset=reset,
       out[0..14]=pc);
}