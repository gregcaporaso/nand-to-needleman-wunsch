#!/usr/bin/env python

import sys
import os
import pathlib

def _print_usage(program_name):
    usage = (
        f"\n{program_name} usage instructions:\n\n"
        f"  {program_name} (--help | -h)\n"
        f"     print help text and exit\n\n"
        f"  {program_name} (--verbose) in.asm\n"
        f"     assemble in.asm to in.hack\n\n"
        f"  {program_name} (--verbose) my/path/in.asm\n"
        f"     assemble my/path/in.asm to my/path/in.hack\n\n"
        "✌️")
    print(usage)


def _raise_error(message, line_number):
    raise ValueError(f'Line {line_number}: {message}')


class SymbolTable(object):

    _allowed_symbol_characters = \
        set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
            '0123456789_.$:')

    _lookup = {'R0': '0', 'R1': '1', 'R2': '2', 'R3': '3', 'R4': '4',
              'R5': '5', 'R6': '6', 'R7': '7', 'R8': '8', 'R9': '9',
              'R10': '10', 'R11': '11', 'R12': '12', 'R13': '13', 'R14': '14',
              'R15':    '15',
              'SP':     '0',
              'LCL':    '1',
              'ARG':    '2',
              'THIS':   '3',
              'THAT':   '4',
              'SCREEN': '16384',
              'KBD':    '24576'}
    _next_memory_location = 16

    def __getitem__(self, key):
        return self._lookup[key]

    def add_variable(self, key):
        self._lookup[key] = self._next_memory_location
        result = self._next_memory_location

        self._next_memory_location += 1

        return result

    def add_label(self, key, value):
        self._lookup[key] = value

    def validate_symbol(self, symbol, line_number):
        if symbol[0].isdigit():
            _raise_error(
                f'Symbols cannot start with a digit, but found: {symbol}.',
                line_number)

        disallowed_characters = set(symbol) - self._allowed_symbol_characters
        if len(disallowed_characters) > 0:
            _raise_error(
                ('Symbols can only contain upper and lower case letters, '
                 'digits, and the _, :, ., and $ characters, but found: '
                 f'{symbol}.'), line_number)


def _process_a_instruction(line, line_number, symbol_table):
    value = line[1:]

    if not line[1:].isdigit() and \
       not (line[1] == '-' and line[2:].isdigit()):
        try:
            value = symbol_table[value]
        except KeyError:
            symbol_table.validate_symbol(value, line_number)
            value = symbol_table.add_variable(value)

    try:
        value = int(value)
    except ValueError:
        raise ValueError(f'Line {line_number}: A-instruction must contain '
                         f'integer value but received {value}.')

    if value < 0 or value > 32767:
        raise ValueError(f'Line {line_number}: Address must be in range '
                         f'[0, 32767] but received {value}.')

    return f'0{value:015b}'

def _get_dest(dest):
    if dest is None:
        return '000'

    known_dests = set(['A', 'D', 'M'])
    unknown_dests = set(dest) - known_dests
    if len(unknown_dests) > 0:
        raise ValueError(
            f'Unknown destintation(s): {", ".join(unknown_dests)}')

    result = [0, 0, 0]
    if 'M' in dest:
        result[2] = 1

    if 'D' in dest:
        result[1] = 1

    if 'A' in dest:
        result[0] = 1

    return ''.join(map(str, result))

def _get_jump(jump):
    lookup = {None : '000',
              'JGT' : '001',
              'JEQ' : '010',
              'JGE' : '011',
              'JLT' : '100',
              'JNE' : '101',
              'JLE' : '110',
              'JMP' : '111'}
    try:
        result = lookup[jump]
    except KeyError:
        raise ValueError(f'Unknown jump: {jump}')

    return result

def _get_comp(comp):
    lookup = {# a == 0
              '0'   : ('0', '101010'),
              '1'   : ('0', '111111'),
              '-1'  : ('0', '111010'),
              'D'   : ('0', '001100'),
              'A'   : ('0', '110000'),
              '!D'  : ('0', '001101'),
              '!A'  : ('0', '110001'),
              '-D'  : ('0', '001111'),
              '-A'  : ('0', '110011'),
              'D+1' : ('0', '011111'),
              'A+1' : ('0', '110111'),
              'D-1' : ('0', '001110'),
              'A-1' : ('0', '110010'),
              'D+A' : ('0', '000010'),
              'D-A' : ('0', '010011'),
              'A-D' : ('0', '000111'),
              'D&A' : ('0', '000000'),
              'D|A' : ('0', '010101'),
              # a == 1
              'M'   : ('1', '110000'),
              '!M'  : ('1', '110001'),
              '-M'  : ('1', '110011'),
              'M+1' : ('1', '110111'),
              'M-1' : ('1', '110010'),
              'D+M' : ('1', '000010'),
              'D-M' : ('1', '010011'),
              'M-D' : ('1', '000111'),
              'D&M' : ('1', '000000'),
              'D|M' : ('1', '010101')}
    try:
        result = lookup[comp]
    except KeyError:
        raise ValueError(f'Unknown comp: {comp}')

    return result

def _get_comp_a1(comp):
    lookup = {}
    try:
        result = lookup[comp]
    except KeyError:
        raise ValueError(f'Unknown comp: {comp}')

    return result

def _parse_c_instruction(instruction):
    try:
        dest, not_dest = instruction.split('=', maxsplit=1)
    except ValueError:
        dest = None
        not_dest = instruction

    try:
        comp, jump = not_dest.split(';', maxsplit=1)
    except ValueError:
        comp = not_dest
        jump = None

    return dest, comp, jump

def _process_c_instruction(instruction, line_number):
    try:
        dest, comp, jump = _parse_c_instruction(instruction)
        dest_b = _get_dest(dest)
        a_b, comp_b = _get_comp(comp)
        jump_b = _get_jump(jump)
    except ValueError as e:
        raise ValueError(f'Line {line_number}: {str(e)}')

    return f'111{a_b}{comp_b}{dest_b}{jump_b}'


def _prepare_instructions(inf, symbol_table):
    instructions = []
    next_instruction_number = 0

    for line_number, line in enumerate(inf, start=1):
        line = line.strip().replace(" ", "").split('//')[0]
        if len(line) == 0 or line.startswith('//'):
            continue
        elif line.startswith('(') and line.endswith(')'):
            label = line[1:-1]
            symbol_table.validate_symbol(label, line_number)
            symbol_table.add_label(label, next_instruction_number)
        else:
            instructions.append((line_number, line))
            next_instruction_number += 1

    return instructions, symbol_table


def hack_assembler(input_fp,
                   output_fp,
                   verbose=False):
    """
    """
    symbol_table = SymbolTable()
    instructions = []

    with open(input_fp) as inf:
        instructions, symbol_table = _prepare_instructions(inf, symbol_table)

    with open(output_fp, 'w') as outf:
        for line_number, instruction in instructions:
            if instruction.startswith('@'):
                machine_instruction = _process_a_instruction(instruction,
                                                             line_number,
                                                             symbol_table)
                outf.write(f'{machine_instruction}\n')
            else:
                machine_instruction = _process_c_instruction(instruction,
                                                             line_number)
                outf.write(f'{machine_instruction}\n')




if __name__ == "__main__":
    if len(sys.argv) == 1 or '--help' in sys.argv or '-h' in sys.argv:
        _print_usage(program_name=pathlib.Path(sys.argv[0]).name)
        exit(0)

    verbose = '--verbose' in sys.argv

    input_fp = pathlib.Path(sys.argv[-1])

    if not input_fp.exists():
        raise ValueError(f"Input path doesn't exist: {input_fp}")

    if not input_fp.suffix == '.asm':
        raise ValueError(
            "Input path must have extension .asm, "
            f"but found {input_fp.suffix}")

    output_fp = input_fp.with_suffix('.hack')

    if verbose:
        print(f"Input path: {input_fp}")
        print(f"Output path: {output_fp}")

    hack_assembler(input_fp, output_fp, verbose=verbose)


