#!/usr/bin/env python

import sys
import os
import pathlib
import glob
from enum import Enum
from collections import namedtuple


def _print_usage(program_name):
    usage = (
        f"\n{program_name} usage instructions:\n\n"
        f"  {program_name} (--help | -h)\n"
        f"     print help text and exit\n\n"
        f"  {program_name} (--verbose) in.asm\n"
        f"     assemble in.asm to in.hack\n\n"
        f"  {program_name} (--verbose) my/path/in.asm\n"
        f"     assemble my/path/in.asm to my/path/in.hack\n\n"
        "✌️")
    print(usage)

Command = namedtuple('Command',
                     ['type',
                      'operation',
                      'args',
                      'text',
                      'source_line_number'])

C = Enum('CommandType',
         ['ARITHMETIC',
          'PUSH',
          'POP',
          'LABEL',
          'GOTO',
          'IF',
          'FUNCTION',
          'RETURN',
          'CALL'])

class VMParser(object):

    # mapping of vm commands to their CommandType
    # and expected number of arguments
    _command_map = {'add'     : (C.ARITHMETIC, 0),
                    'sub'     : (C.ARITHMETIC, 0),
                    'and'     : (C.ARITHMETIC, 0),
                    'or'      : (C.ARITHMETIC, 0),
                    'eq'      : (C.ARITHMETIC, 0),
                    'gt'      : (C.ARITHMETIC, 0),
                    'lt'      : (C.ARITHMETIC, 0),
                    'not'     : (C.ARITHMETIC, 0),
                    'neg'     : (C.ARITHMETIC, 0),
                    'push'    : (C.PUSH,       2),
                    'pop'     : (C.POP,        2),
                    'label'   : (C.LABEL,      1),
                    'goto'    : (C.GOTO,       1),
                    'if-goto' : (C.GOTO,       1),
                    'function': (C.FUNCTION,   2),
                    'call'    : (C.CALL,       2),
                    'return'  : (C.RETURN,     0),
                    }

    def __init__(self, inf):
        self.inf = inf
        self.line_number = 0

    def __call__(self):
        for line in self.inf:
            self.line_number += 1
            line = self._clean_line(line)
            if len(line) == 0 or line.startswith('//'):
                continue
            else:
                command = self._parse_command(line.split())
                yield command

    def _parse_command(self, fields):
        try:
            command_type, expected_n_args = self._command_map[fields[0]]
        except KeyError:
            self._raise_error(f"Unknown command type: {fields[0]}")

        if len(fields[1:]) != expected_n_args:
               self._raise_error(
                   f"Expected {expected_n_args} arguments for command "
                   f"{fields[0]}, but received "
                   f"{len(fields[1:])}: {' '.join(fields)}")

        return Command(type=command_type,
                       operation=fields[0],
                       args=fields[1:],
                       text=' '.join([fields[0]] + fields[1:]),
                       source_line_number=self.line_number)

    def _clean_line(self, line):
        return line.strip().split('//')[0]

    def _raise_error(self,
                     message):
        raise ValueError(f'Line {self.line_number}: {message}')


class AsmWriter(object):

    _segment_map = {'local': 'LCL',
                    'argument': 'ARG',
                    'this': 'THIS',
                    'that': 'THAT'
                    }
    _temp_range = (5, 12)
    _pointer_map = {'0': 'THIS',
                    '1': 'THAT'}

    _pop_virtual_register = "R13"
    _return_frame_virtual_register = "R14"
    _return_ret_address_virtual_register = "R15"

    def __init__(self, outf):
        self.outf = outf
        self.command_number = 0
        self._label_counter = 0
        self._static_count = 0
        self._static_ref = {}
        self._module_label = 'null'

    def __call__(self, command):
        self._command = command
        self._write_comment(f"Start {command.type}")
        self._write_comment(command.text)

        if command.type == C.PUSH:
            self._push(command)
        elif command.type == C.POP:
            self._pop(command)
        elif command.type == C.ARITHMETIC:
            self._arithmetic(command)
        elif command.type == C.LABEL:
            self._label(command)
        elif command.type == C.GOTO:
            self._goto(command)
        elif command.type == C.FUNCTION:
            self._function(command)
        elif command.type == C.RETURN:
            self._return(command)
        elif command.type == C.CALL:
            self._call(command)
        else:
            self._raise_error(
                f"Unknown command type: {command.type}")

        self._write_comment(f"End {command.type}", double_newline=True)

    def initiate_program(self):
        pass

    def initiate_module(self, module_label):
        self._validate_label(module_label)
        self._module_label = module_label
        self._write_comment(f"Begin module: {self._module_label}")

    def finalize_module(self):
        self._write_comment(f"End module: {self._module_label}",
                            double_newline=True)

    def finalize_program(self):
        self._write_comment("Terminal infinite loop")

        label = self._next_label()

        self._write_command(f"({label})")
        self._write_command(f"@{label}")
        self._write_command("0;JMP")

    def _validate_label(self, value):
        print("Warning: no label validation has been implemented yet.")

    def _raise_error(self,
                     message):
        # referencing the line number feels like bad encapsulation,
        # i should move validation that uses this to the parser
        raise ValueError(
            f"Line {self._command.source_line_number}: {message}")

    def _write_comment(self, comment, double_newline=False):
        self.outf.write(f"// {comment}\n")
        if double_newline:
            self.outf.write(f"\n")

    def _write_command(self, command):
        self.outf.write(f" {command}\n")

    def _write_label(self, label):
        self.outf.write(f"({self._module_label}.{label})\n")

    def _increment_stack_pointer(self):
        self._write_comment("SP++")
        self._write_command("@SP")
        self._write_command("M = M + 1")

    def _decrement_stack_pointer(self):
        self._write_comment("SP--")
        self._write_command("@SP")
        self._write_command("M = M - 1")

    def _next_label(self):
        result = f"LABEL.{self._label_counter}"
        self._label_counter += 1
        return result

    def _address_temp(self, index):
        address = self._temp_range[0] + int(index)
        if address < self._temp_range[0] or address > self._temp_range[1]:
            self._raise_error(
                f"Address {address} out of temp range "
                f"[{self._temp_range[0]}, {self._temp_range[1]}].")
        self._write_command(f"@{address}")

    def _push_temp(self, index):
        self._address_temp(index)
        self._write_command("D = M")

    def _pop_temp(self, index):
        self._address_temp(index)
        self._write_command("D = A")

    def _address_static(self, index):
        try:
            label = self._static_ref[index]
        except KeyError:
            label = f"{self._module_label}.{self._static_count}"
            self._static_ref[index] = label
            self._static_count += 1
        self._write_command(f"@{label}")

    def _push_static(self, index):
        self._address_static(index)
        self._write_command("D = M")

    def _pop_static(self, index):
        self._address_static(index)
        self._write_command("D = A")

    def _address_pointer(self, index):
        try:
            pointer_ref = self._pointer_map[index]
        except KeyError:
            self._raise_error(
                "Index for pointer segment must be either 0 or 1, "
                f"but received {index}.")
        self._write_command(f"@{pointer_ref}")

    def _push_pointer(self, index):
        self._address_pointer(index)
        self._write_command("D = M")

    def _pop_pointer(self, index):
        self._address_pointer(index)
        self._write_command("D = A")

    def _address_segment(self, segment, index):
        try:
            segment_ref = self._segment_map[segment]
        except KeyError:
            self._raise_error(f"Unknown pop command segment: {segment}")
        self._write_command(f"@{segment_ref}")
        self._write_command("D = M")
        self._write_command(f"@{index}")
        self._write_command(f"A = D + A")

    def _push_segment(self, segment, index):
        self._address_segment(segment, index)
        self._write_command("D = M")

    def _pop_segment(self, segment, index):
        self._address_segment(segment, index)
        self._write_command(f"D = A")

    def _push(self, command):
        segment, index = command.args
        if segment == 'constant':
            self._write_command(f"@{index}")
            self._write_command("D = A")
        elif segment == 'temp':
            self._push_temp(index)
        elif segment == 'static':
            self._push_static(index)
        elif segment == 'pointer':
            self._push_pointer(index)
        else:
            self._push_segment(segment, index)

        self._write_command("@SP")
        self._write_command("A = M")
        self._write_command("M = D")
        self._increment_stack_pointer()

    def _pop(self, command):
        segment, index = command.args

        if segment == 'temp':
            self._pop_temp(index)
        elif segment == "static":
            self._pop_static(index)
        elif segment == 'pointer':
            self._pop_pointer(index)
        else:
            self._pop_segment(segment, index)

        # this reference to a virtual register add two additional
        # memory references on every pop. is that necessary?
        # it's storing the destination address
        self._write_command(f"@{self._pop_virtual_register}")
        self._write_command("M = D")

        self._write_pop_to_D()

        self._write_command(f"@{self._pop_virtual_register}")
        self._write_command("A = M")
        self._write_command("M = D")

    def _label(self, command):
        label = command.args[0]
        self._validate_label(label)
        self._write_label(label)

    def _write_pop_to_D(self):
        self._decrement_stack_pointer()
        self._write_command("@SP")
        self._write_command("A = M")
        self._write_command("D = M")

    def _write_push_value(self, value):
        self._write_command(f"@{value}")
        self._write_command("D = A")
        self._write_command("@SP")
        self._write_command("A = M")
        self._write_command("M = D")
        self._increment_stack_pointer()

    def _function(self, command):
        function_name, n_vars = command.args
        n_vars = int(n_vars)
        self._validate_label(function_name)
        self._write_label(function_name)

        for i in range(n_vars):
            self._write_push_value(0)

    def _call(self, command):
        pass

    def _return(self, command):
        # save LCL to virtual register
        self._write_command("@LCL")
        self._write_command("D = M")
        self._write_command(f"@{self._return_frame_virtual_register}")
        self._write_command("M = D")

        # write the return address to its virtual register
        self._write_command("@5")
        self._write_command("A = D - A")
        self._write_command("D = M")
        self._write_command(f"@{self._return_ret_address_virtual_register}")
        self._write_command("M = D")

        # move the return value to the beginning of the ARG segment
        self._write_pop_to_D()
        self._write_command("@ARG")
        self._write_command("A = M")
        self._write_command("M = D")

        # reset the stack pointer to just after the return value
        self._write_command("D = A")
        self._write_command("@SP")
        self._write_command("M = D + 1")

        # reset THAT (eg) pointer for caller
        for e in ['THAT', 'THIS', 'ARG', 'LCL']:
            # decrement frame to location containing orig THAT address
            self._write_command(f"@{self._return_frame_virtual_register}")
            self._write_command("M = M - 1")
            # put original THAT address in D
            self._write_command("A = M")
            self._write_command("D = M")
            # put D in @THAT
            self._write_command(f"@{e}")
            self._write_command("M = D")

        self._write_command(f"@{self._return_ret_address_virtual_register}")
        self._write_command("A = M")
        self._write_command("0;JMP")

    def _goto(self, command):
        label = command.args[0]
        jump_target = f"{self._module_label}.{label}"
        if command.operation == 'if-goto':
            self._write_pop_to_D()
            self._write_command(f"@{jump_target}")
            self._write_command('D;JNE')
        else: # unconditional goto
            self._write_command(f"@{jump_target}")
            self._write_command("0;JMP")

    def _apply_one_operand_operation(self, op):
        self._decrement_stack_pointer()
        self._write_command("@SP")
        self._write_command("A = M")
        self._write_command(f"M = {op}M")
        self._increment_stack_pointer()

    def _apply_two_operand_operation(self, op):
        self._write_pop_to_D()
        self._decrement_stack_pointer()
        self._write_command("@SP")
        self._write_command("A = M")
        self._write_command(f"M = M {op} D")
        self._increment_stack_pointer()

    def _apply_comparison_operation(self,
                                    jump_true,
                                    jump_false):
        self._write_pop_to_D()

        self._decrement_stack_pointer()

        self._write_command("@SP")
        self._write_command("A = M")
        self._write_command("D = M - D")

        # TODO: update label handling to use C.LABEL functionality
        label_true = self._next_label()
        label_false = self._next_label()
        label_jmp = self._next_label()

        self._write_command(f"@{label_true}")
        self._write_command(f"D;{jump_true}")

        self._write_command(f"@{label_false}")
        self._write_command(f"D;{jump_false}")

        self._write_command(f"({label_true})")
        self._write_command("@SP")
        self._write_command("A = M")
        self._write_command("M = -1")
        self._write_command(f"@{label_jmp}")
        self._write_command("0;JMP")

        self._write_command(f"({label_false})")
        self._write_command("@SP")
        self._write_command("A = M")
        self._write_command("M = 0")
        self._write_command(f"@{label_jmp}")
        self._write_command("0;JMP")

        self._write_command(f"({label_jmp})")
        self._increment_stack_pointer()

    def _arithmetic(self, command):
        if command.operation == 'add':
            self._apply_two_operand_operation('+')
        elif command.operation == 'sub':
            self._apply_two_operand_operation('-')
        elif command.operation == 'or':
            self._apply_two_operand_operation('|')
        elif command.operation == 'and':
            self._apply_two_operand_operation('&')
        elif command.operation == 'neg':
            self._apply_one_operand_operation('-')
        elif command.operation == 'not':
            self._apply_one_operand_operation('!')
        elif command.operation == 'eq':
            self._apply_comparison_operation(
                jump_true='JEQ', jump_false='JNE')
        elif command.operation == 'lt':
            self._apply_comparison_operation(
                jump_true='JLT', jump_false='JGE')
        elif command.operation == 'gt':
            self._apply_comparison_operation(
                jump_true='JGT', jump_false='JLE')
        else:
            raise NotImplementedError(
                f"Unknown arithmetic command: {command.operation}")



class VMTranslator(object):

    def __init__(self, verbose=False):
        self._verbose = verbose

    def __call__(self, input_path):
        input_fps, output_fp = self._process_input_path(input_path)

        with open(output_fp, 'w') as outf:
            asm_writer = AsmWriter(outf)
            asm_writer.initiate_program()

            for module_label, input_fp in input_fps:
                asm_writer.initiate_module(module_label)

                with open(input_fp) as inf:
                    vm_parser = VMParser(inf)
                    for command in vm_parser():
                        if self._verbose:
                            print(
                                f"{command.type}: "
                                f"{command.operation} "
                                f"{' '.join(command.args)}")
                        asm_writer(command)
                    asm_writer.finalize_module()

            asm_writer.finalize_program()

    def _process_input_path(self, input_path):
        infs = []
        input_path = pathlib.Path(input_path)

        if not input_path.exists():
            raise ValueError(f"Input path doesn't exist: {input_path}")

        if input_path.is_dir():
            input_fps = [pathlib.Path(fp)
                         for fp in glob.glob(str(input_path / '*.vm'))]
            if len(input_fps) == 0:
                raise ValueError(f"No input .vm files found in {input_path}.")
        else:
            if not input_path.suffix == '.vm':
                raise ValueError(
                    "Input path must have extension .vm, "
                    f"but found {input_path.suffix}")
            input_fps = [input_path]

        infs = [(fp.stem, fp) for fp in input_fps]
        output_fp = input_path.with_suffix('.asm')

        if self._verbose:
            print('Input vm files:')
            for input_fp in input_fps:
                print(f' {input_fp}')
            print('Output asm file:')
            print(f' {output_fp}', end='\n\n')

        return infs, output_fp


if __name__ == "__main__":
    if len(sys.argv) == 1 or '--help' in sys.argv or '-h' in sys.argv:
        _print_usage(program_name=pathlib.Path(sys.argv[0]).name)
        exit(0)

    verbose = '--verbose' in sys.argv
    input_path = sys.argv[-1]

    vm_translator = VMTranslator(verbose=verbose)
    vm_translator(input_path)