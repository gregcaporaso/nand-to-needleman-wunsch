class AlignmentMatrix {

    field DNASequence sequence1, sequence2;
    field int n_rows, n_columns;
    field Array matrix;

    constructor AlignmentMatrix new(DNASequence s1, DNASequence s2){
        var int r, c;
        var Array row;

        let sequence1 = s1;
        let sequence2 = s2;

        let n_columns = s1.getLength();
        let n_rows = s2.getLength();

        let matrix = Array.new(n_rows);
        let r = 0;
        let c = 0;
        while (r < n_rows){
            let row = Array.new(n_columns);
            while (c < n_columns){
                let row[c] = 0;
                let c = c + 1;
            }
            let matrix[r] = row;
            let r = r + 1;
        }

        return this;
    }

    method int getNRows() {
        return n_rows;
    }

    method int getNColumns() {
        return n_columns;
    }

    method void setValueAt(int row_n, int col_n, int value) {
        var Array row;
        let row = matrix[row_n];
        let row[col_n] = value;
        return;
    }

    method void print() {
        var String s1, s2;
        var int r, c;
        var Array current_row;
        var int current_value;

        let s1 = sequence1.getSequenceString();
        let s2 = sequence2.getSequenceString();

        do Screen.clearScreen();
        do Output.moveCursor(0,0);
        do Output.printChar(32);
        do Output.printString(s1);
        do Output.println();

        let r = 0;
        while (r < n_rows){
            let current_row = matrix[r];
            do Output.printChar(s2.charAt(r));
            let c = 0;
            while (c < n_columns){
                let current_value = current_row[c];
                if (current_value > 0) {
                    do Output.printChar(43);
                } else {
                    if (current_value < 0) {
                        do Output.printChar(45);
                    } else {
                        do Output.printChar(32);
                    }
                }
                let c = c + 1;
            }
            do Output.println();
            let r = r + 1;
        }
        return;
    }
}