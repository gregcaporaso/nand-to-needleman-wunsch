// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean currentColor;
    static Array zerosExcept, onesExcept;
    static int memMapStart, memMapEnd, nRows, nCols, bitWidth;

    /** Initializes the Screen. */
    function void init() {
        let currentColor = true;
        let nCols = 511;
        let nRows = 255;
        let bitWidth = 16;
        let memMapStart = 16384;
        let memMapEnd = memMapStart + (nRows * ((nCols + 1) / bitWidth));

        let onesExcept = Array.new(15);
        let zerosExcept = Array.new(15);

        let zerosExcept[0] = 1;
        let zerosExcept[1] = 2;
        let zerosExcept[2] = 4;
        let zerosExcept[3] = 8;
        let zerosExcept[4] = 16;
        let zerosExcept[5] = 32;
        let zerosExcept[6] = 64;
        let zerosExcept[7] = 128;
        let zerosExcept[8] = 256;
        let zerosExcept[9] = 512;
        let zerosExcept[10] = 1024;
        let zerosExcept[11] = 2048;
        let zerosExcept[12] = 4096;
        let zerosExcept[13] = 8192;
        let zerosExcept[14] = 16384;
        // since - is a unary operator, I can't actually directly set the
        // value to -32768, because the integer component is too large. so...
        let zerosExcept[15] = -32767 - 1;

        let onesExcept[0] = ~zerosExcept[0];
        let onesExcept[1] = ~zerosExcept[1];
        let onesExcept[2] = ~zerosExcept[2];
        let onesExcept[3] = ~zerosExcept[3];
        let onesExcept[4] = ~zerosExcept[4];
        let onesExcept[5] = ~zerosExcept[5];
        let onesExcept[6] = ~zerosExcept[6];
        let onesExcept[7] = ~zerosExcept[7];
        let onesExcept[8] = ~zerosExcept[8];
        let onesExcept[9] = ~zerosExcept[9];
        let onesExcept[10] = ~zerosExcept[10];
        let onesExcept[11] = ~zerosExcept[11];
        let onesExcept[12] = ~zerosExcept[12];
        let onesExcept[13] = ~zerosExcept[13];
        let onesExcept[14] = ~zerosExcept[14];
        let onesExcept[15] = ~zerosExcept[15];

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = memMapStart;
        while (i < memMapEnd) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        if ((x < 0) | (x > nCols) | (y < 0) | (y > nRows)){
            do Sys.error(7);
        }
        do Screen._drawPixel(x, y);
        return;
    }

    /** drawPixel private helper.
        Avoids coordinate validation. */
    function void _drawPixel(int x, int y) {
        var int wordAddress, bitN, val;

        let wordAddress = memMapStart + (x / 16) + (y * 32);
        let val = Memory.peek(wordAddress);
        // x % bitWidth
        let bitN = x - (bitWidth * (x / bitWidth));
        // modify val applying a bitwise operation
        if (currentColor) {
            // | against all zeros (ie., identity function) except a 1 at bitN
            let val = val | zerosExcept[bitN];
        } else {
            // TODO: Something is broken with my logic or my array here
            // & against all ones (ie., identity function) except a 0 at bitN
            let val = val & onesExcept[bitN];
        }
        do Memory.poke(wordAddress, val);

        return;
    }
    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if ((x1 < 0) | (x1 > nCols) | (y1 < 0) | (y1 > nRows) |
            (x2 < 0) | (x2 > nCols) | (y2 < 0) | (y2 > nRows)) {
            do Sys.error(8);
        }
        do Screen._drawLine(x1, y1, x2, y2);
        return;
    }

    /** drawLine private helper.
        Avoids coordinate validation. */
    function void _drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff, temp;

        if (x1 = x2) {
            // vertical line
            if (y2 < y1) {
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
            }
            while (y1 < (y2+1)) {
                do Screen.drawPixel(x1, y1);
                let y1 = y1 + 1;
            }
            return;
        }

        if (y1 = y2) {
            // horizontal line
            if (x2 < x1) {
                let temp = x1;
                let x1 = x2;
                let x2 = temp;
            }
            while (x1 < (x2+1)) {
                do Screen.drawPixel(x1, y1);
                let x1 = x1 + 1;
            }
            return;
        }

        if (x2 < x1) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let a = 0;
        let b = 0;
        let diff = 0;
        // because i sorted these on x values, and handled dx = 0 above,
        // dx will always be > 1 here
        let dx = x2 - x1;
        // if dy is negative, the slope of the line is negative
        let dy = y2 - y1;

        if (dy > 1) {
            while (((a < dx) | (a = dx)) &
                   ((b < dy) | (b = dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        } else {
            // negate dy for accounting purposes,
            // and subtract b from y in each iteration (rather than adding)
            // to account for the negative slope
            let dy = -dy;
            while (((a < dx) | (a = dx)) &
                   ((b < dy) | (b = dy))) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        return;

    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        // TODO: Optimize by setting full words when possible, rather than
        // individual bits.
        var int currY;

        if ((x1 > x2) | (y1 > y2) |
            (x1 < 0) | (y1 < 0) | (x2 > nCols) | (y2 > nRows)) {
            do Sys.error(9);
        }

        let currY = y1;
        while (currY < (y2 + 1)) {
            do Screen._drawLine(x1, currY, x2, currY);
            let currY = currY + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, rSquared;
        if ((x < 0) | (x > nCols) | (y < 0) | (y > nRows)) {
            do Sys.error(12);
        }
        if ((r < 1) | (r > 181)) {
            do Sys.error(13);
        }

        let dy = -r;
        let rSquared = r * r;
        while (dy < r) {
            let dx = Math.sqrt(rSquared - (dy*dy));
            do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
            let dy = dy + 1;
        }

        return;
    }
}
