// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram;
    static int heapBase, heapSize, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        // the following heapSize ends the heap at the start of the
        // screen's memory map
        let heapSize = 14335;

        let freeList = heapBase;
        let ram[freeList] = heapSize;
        let ram[freeList + 1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int blockSize, currentFree, previousFree, remainingSize, block;

        let blockSize = size + 1;
        // start of the linked list
        let currentFree = freeList;
        let previousFree = 0;
        let block = 0;

        while (~(currentFree = 0)) {
            if (~(ram[currentFree] < blockSize)) {
                let remainingSize = ram[currentFree] - blockSize;

                if (remainingSize = 0) {
                    // redirect the pointer to this entry to the pointer to
                    // the next entry - i.e., remove current entry from the
                    // free list
                    if (previousFree = 0) {
                        // this is the first entry, so adjust the pointer to
                        // the start of the list
                        let freeList = ram[currentFree + 1];
                    } else {
                        let ram[previousFree + 1] = ram[currentFree + 1];
                    }
                } else {
                    // redirect the pointer to this entry to the start of a
                    // reduce size available block
                    if (previousFree = 0) {
                        // this is the first entry, so adjust the pointer to
                        // the start of the list
                        let freeList = currentFree + blockSize;
                    } else {
                        let ram[previousFree + 1] = currentFree + blockSize;
                    }
                    // reduce the remaining size
                    let ram[currentFree + blockSize] = remainingSize;
                    let ram[currentFree + blockSize + 1] = ram[currentFree + 1];
                }
                let block = currentFree;
                let ram[block] = blockSize;
                return block;
            } else {
                let previousFree = currentFree;
                let currentFree = ram[currentFree + 1];
            }
        }

        // a large enough memory block was not found (i.e., block = 0)
        do Sys.error(42);
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // this implements the first available allocation algorithm,
        // though slightly modified to put the deAlloc'ed block at the
        // beginning of the freeList (so alloc will preferentially reuse
        // deAlloc'ed blocks).
        // should be possible to implement best-fit by adding blocks back
        // to the free list just before the first free block that has a larger
        // size than the block being deAlloc'ed
        // o[0] is already the size
        let o[1] = freeList;
        let freeList = o;
        return;
    }
}
