// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array s;
    field int maxLength;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int ml) {
        if (ml < 1) {
            let s = null;
        } else {
            let s = Array.new(ml);
        }

        let maxLength = ml;
        let length = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j < length)) {
            do Sys.error(97);
        }
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (~(j < length)) {
            do Sys.error(98);
        }
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = maxLength) {
            do Sys.error(99);
        }
        let s[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            return;
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, result;
        var String currValue;
        var boolean negate;

        let i = 0;
        let result = 0;
        let currValue = String.new(1);

        if (s[i] = 45) {
            let negate = true;
            let i = 1;
        } else {
            let negate = false;
        }

        while (i < length) {
            let currValue = s[i];
            if ((currValue > 47) & (currValue < 58)) {
                let result = (result * 10) + (currValue - 48);
                let i = i + 1;
            } else {
                // a non-int character code was encountered. bail out.
                let i = length;
            }
        }

        if (negate) {
            let result = -result;
        }

        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int c, i, lastDigit;
        var boolean negate;

        if (val < 0) {
            let negate = true;
            let val = val * -1;
        } else {
            let negate = false;
        }

        // val % 10
        let lastDigit = val - (10 * (val / 10));
        let c = lastDigit + 48;

        if (val < 10) {
            // clear any pre-existing content in the String
            let length = 0;
            do appendChar(c);
        } else {
            do setInt(val / 10);
            do appendChar(c);
        }

        if (negate) {
            // prepend a -
            // there must be a better way
            let i = length;
            let length = length + 1;
            while (i > 0) {
                do setCharAt(i, s[i-1]);
                let i = i - 1;
            }
            let s[0] = 45;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
